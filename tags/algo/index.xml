<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algo on Air Junda Space</title>
    <link>https://airjunda.github.io/tags/algo/</link>
    <description>Recent content in Algo on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Wed, 12 Jan 2022 18:38:33 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/tags/algo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python自定义Comparator</title>
      <link>https://airjunda.github.io/post/comparator/</link>
      <pubDate>Wed, 12 Jan 2022 18:38:33 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/comparator/</guid>
      <description>Python中自定义comparator 有的题目需要排序时基于自定义的规则去排序。自定义规则通过手写comparator去实现。sorted(), sort()都可以传入自定义的compartor, 但是python3的使用上有点点不一样。因为没有了cmp参数。
Lintcode相关题目  184 Largest Number  comparator 对于函数 comp(left, right)： 1. return a negative value (&amp;lt; 0) when the left item should be sorted before the right item 2. return a positive value (&amp;gt; 0) when the left item should be sorted after the right item 3. return 0 if left and right input is equal
实战（184 最大数） 给出一组非负整数，重新排列他们的顺序把他们组成一个最大的整数。
Input: [1, 20, 23, 4, 8] Output: &amp;#34;8423201&amp;#34; Python2</description>
    </item>
    
    <item>
      <title>LRU算法复习笔记</title>
      <link>https://airjunda.github.io/post/lru/</link>
      <pubDate>Thu, 30 Dec 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/lru/</guid>
      <description>LRU算法 这篇是记录下LRU算法写起来时候的一些注意事项。LRU算法在OS, DB中都有涉及。在Redis也有涉及。面试也是高频的一个考察。 LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。
他山之石  labuladong解析   分析 LeetCode的LRU需要下面2个这样的借口。要求：
 o(1)操作 满了capacity时，set() 时候需要踢掉最久未使用的key-value pair来腾空间 每次get, 需要把key-value挪到某种排序的最前面。  def __init__(self, capacity): pass def get(self, key): pass def set(self, key, value): pass 那么，什么数据结构同时符合上述条件呢？哈希表set/get快，但是数据无固定顺序；链表有顺序之分，set插入快，但是get慢。所以结合一下，形成一种新的数据结构：哈希链表。
哈希链表就是一个双向linkedlist + hashmap；hashmap的key是key, value是链表里的node。这样可以直接通过某个Key访问到node
使用OrderDict的偷懒实现 OrderDict是Python中的特殊哈希表。会按插入先后顺序维持一个序列。最先添加的位于最左，后面的加到右边。这个版本里需要记忆orderdict丢弃第一个key的特殊用法： dict.popitem(last=False)
from collections import OrderedDict class LRUCache: &amp;#34;&amp;#34;&amp;#34; @param: capacity: An integer &amp;#34;&amp;#34;&amp;#34; def __init__(self, capacity): self.capacity = capacity self.maps = OrderedDict() &amp;#34;&amp;#34;&amp;#34; @param: key: An integer @return: An integer &amp;#34;&amp;#34;&amp;#34; def get(self, key): if key not in self.</description>
    </item>
    
  </channel>
</rss>
