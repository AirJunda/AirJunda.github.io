<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DFS on Air Junda Space</title>
    <link>https://airjunda.github.io/tags/dfs/</link>
    <description>Recent content in DFS on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Tue, 01 Feb 2022 15:49:36 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/tags/dfs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DFS 复习</title>
      <link>https://airjunda.github.io/post/dfs/</link>
      <pubDate>Tue, 01 Feb 2022 15:49:36 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/dfs/</guid>
      <description>DFS 这篇是记录下DFS相关的题写起来时候的一些注意事项。DFS个人觉得VO中考察少，主要是OA, 而且OA中的运用很多时候是找不到最优解时的暴力解的手段。但是通过pruning是可以加速这个暴力搜索的过程的。DFS题主要是2大类，排列和组合。其中一个我觉得的难点是面对有重复元素的array的排列和组合的去重问题。
常见注意事项 DFS问题开始写代码之前，一定要先把问题抽象成一个图的遍历问题。然后再开始做。这样思路会清晰很多，也方便自己逻辑debug
另外我觉得DFS题自己做的时候内心要问自己下面几个问题：
 原始输入需要排序吗？ 要去重吗？ 形成中的中间态序列是一个array还是string或者是个数字  排列 排列题需要一个hashamp叫visited, 记录哪些元素已经被选中了。 排列的个数是n！
16 · 带重复元素的排列
class Solution: &amp;#34;&amp;#34;&amp;#34; @param nums: A list of integers @return: A list of unique permutations &amp;#34;&amp;#34;&amp;#34; def permuteUnique(self, nums: List[int]) -&amp;gt; List[List[int]]: # write your code here self.res = [] nums.sort() vis = [False] *len(nums) self.dfs(nums, [],vis) return self.res def dfs(self,nums,comb,visited): if len(comb) == len(nums): self.res.append(comb[:]) return for i in range(len(nums)): if visited[i] == True: continue # 去重做法 if i &amp;gt;= 1 and nums[i-1] == nums[i] and visited[i-1] == False: continue comb.</description>
    </item>
    
  </channel>
</rss>
