<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lintcode on Air Junda Space</title>
    <link>https://airjunda.github.io/tags/lintcode/</link>
    <description>Recent content in Lintcode on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Tue, 01 Feb 2022 17:51:43 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/tags/lintcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two Pointers复习</title>
      <link>https://airjunda.github.io/post/two_pointers/</link>
      <pubDate>Tue, 01 Feb 2022 17:51:43 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/two_pointers/</guid>
      <description>Two Pointers问题 严格来说two pointers不是一种算法。是一类问题。主要是可以分成 背向，双向，同向。
背向双指针 用这题复习就好了：最长回文字串
双向双指针 经典例题是two sum，但是 双向双指针其实可以细分为3类。
 Reverse 类（较少） Two Sum 类（最多） Partition 类（较多）  Reverse 类 复习一下三步翻转法就好: 旋转数组
图解如下：
nums = &amp;#34;-----&amp;gt;--&amp;gt;&amp;#34;; k =3 result = &amp;#34;--&amp;gt;-----&amp;gt;&amp;#34;; reverse &amp;#34;-----&amp;gt;--&amp;gt;&amp;#34; we can get &amp;#34;&amp;lt;--&amp;lt;-----&amp;#34; reverse &amp;#34;&amp;lt;--&amp;#34; we can get &amp;#34;--&amp;gt;&amp;lt;-----&amp;#34; reverse &amp;#34;&amp;lt;-----&amp;#34; we can get &amp;#34;--&amp;gt;-----&amp;gt;&amp;#34; Two Sum 类 TwoSum原题：给一组整数arr和目标值，是否存在任意一对数字之和等于这个值 原题很简单，但是如果输入有重复元素应该如何处理呢？那么就看这题： Two Sum - Unique pairs
def twoSum6(self, nums, target): nums.sort() ans = 0 i,j = 0 , len(nums)-1 while i &amp;lt; j: tsum = nums[i] + nums[j] if tsum &amp;gt; target: j -= 1 elif tsum &amp;lt; target: i += 1 else: ans += 1 i += 1 j -= 1 while i &amp;lt; j and nums[i] == nums[i-1]: i += 1 while i &amp;lt; j and nums[j] == nums[j+1]: j -= 1 return ans 3Sum with repeated elements</description>
    </item>
    
    <item>
      <title>DFS 复习</title>
      <link>https://airjunda.github.io/post/dfs/</link>
      <pubDate>Tue, 01 Feb 2022 15:49:36 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/dfs/</guid>
      <description>DFS 这篇是记录下DFS相关的题写起来时候的一些注意事项。DFS个人觉得VO中考察少，主要是OA, 而且OA中的运用很多时候是找不到最优解时的暴力解的手段。但是通过pruning是可以加速这个暴力搜索的过程的。DFS题主要是2大类，排列和组合。其中一个我觉得的难点是面对有重复元素的array的排列和组合的去重问题。
常见注意事项 DFS问题开始写代码之前，一定要先把问题抽象成一个图的遍历问题。然后再开始做。这样思路会清晰很多，也方便自己逻辑debug
另外我觉得DFS题自己做的时候内心要问自己下面几个问题：
 原始输入需要排序吗？ 要去重吗？ 形成中的中间态序列是一个array还是string或者是个数字  排列 排列题需要一个hashamp叫visited, 记录哪些元素已经被选中了。 排列的个数是n！
16 · 带重复元素的排列
class Solution: &amp;#34;&amp;#34;&amp;#34; @param nums: A list of integers @return: A list of unique permutations &amp;#34;&amp;#34;&amp;#34; def permuteUnique(self, nums: List[int]) -&amp;gt; List[List[int]]: # write your code here self.res = [] nums.sort() vis = [False] *len(nums) self.dfs(nums, [],vis) return self.res def dfs(self,nums,comb,visited): if len(comb) == len(nums): self.res.append(comb[:]) return for i in range(len(nums)): if visited[i] == True: continue # 去重做法 if i &amp;gt;= 1 and nums[i-1] == nums[i] and visited[i-1] == False: continue comb.</description>
    </item>
    
    <item>
      <title>Binary Search易错难点</title>
      <link>https://airjunda.github.io/post/binary_search/</link>
      <pubDate>Tue, 25 Jan 2022 18:10:21 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/binary_search/</guid>
      <description>二分法本身不难。不过有几类类问题我还不是特别熟练。容易卡住/出错。这个文章就是记录下相关的题。方便以后复习。
倍增法  447 在大数组中查找  二分答案 二分答案容易出Hard. 这类题难的是要么想不到可以用二分法做，要么就是二分用的helper()不知道做什么。二分答案的helper()很多题里都是一种greedy的思路。
931这题号称集二分法之大成的经典题
二分答案合集
旋转数组相关 寻找旋转排序数组中的最小值
 159 160  搜索旋转数组中的值
 62 63  159 寻找旋转排序数组中的最小值（无重复） 159这题 我觉得难点是思考的全面性。比如binary search里判断条件是 &amp;gt; 还是 &amp;gt;=；但是这题是假设no repeated elements, 所以其实不难。
class Solution: &amp;#34;&amp;#34;&amp;#34; @param nums: a rotated sorted array @return: the minimum number in the array &amp;#34;&amp;#34;&amp;#34; def findMin(self, nums): # 159 solution l, r = 0, len(nums)-1 leftmin, rightmax = nums[0], nums[-1] while l + 1 &amp;lt; r: m = (l + r) // 2 if nums[m] &amp;gt;= rightmax: l = m elif nums[m] &amp;lt; rightmax: r = m return min(nums[r],nums[l],leftmin) 160 寻找旋转排序数组中的最小值（有重复） 160这题的坑是这样的：如果沿用159的做法会错。因为有重复元素后，如果旋转点刚好是在一群repeated element中间。就会形成新的nums里nums[-1]==nums[0]</description>
    </item>
    
    <item>
      <title>Python自定义Comparator</title>
      <link>https://airjunda.github.io/post/comparator/</link>
      <pubDate>Wed, 12 Jan 2022 18:38:33 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/comparator/</guid>
      <description>Python中自定义comparator 有的题目需要排序时基于自定义的规则去排序。自定义规则通过手写comparator去实现。sorted(), sort()都可以传入自定义的compartor, 但是python3的使用上有点点不一样。因为没有了cmp参数。
Lintcode相关题目  184 Largest Number  comparator 对于函数 comp(left, right)：
 return a negative value (&amp;lt; 0) when the left item should be sorted before the right item return a positive value (&amp;gt; 0) when the left item should be sorted after the right item return 0 if left and right input is equal  实战（184 最大数） 给出一组非负整数，重新排列他们的顺序把他们组成一个最大的整数。
Input: [1, 20, 23, 4, 8] Output: &amp;#34;8423201&amp;#34; Python2</description>
    </item>
    
    <item>
      <title>LRU算法复习笔记</title>
      <link>https://airjunda.github.io/post/lru/</link>
      <pubDate>Thu, 30 Dec 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/lru/</guid>
      <description>LRU算法 这篇是记录下LRU算法写起来时候的一些注意事项。LRU算法在OS, DB中都有涉及。在Redis也有涉及。面试也是高频的一个考察。 LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。
他山之石  labuladong解析   分析 LeetCode的LRU需要下面2个这样的借口。要求：
 o(1)操作 满了capacity时，set() 时候需要踢掉最久未使用的key-value pair来腾空间 每次get, 需要把key-value挪到某种排序的最前面。  def __init__(self, capacity): pass def get(self, key): pass def set(self, key, value): pass 那么，什么数据结构同时符合上述条件呢？哈希表set/get快，但是数据无固定顺序；链表有顺序之分，set插入快，但是get慢。所以结合一下，形成一种新的数据结构：哈希链表。
哈希链表就是一个双向linkedlist + hashmap；hashmap的key是key, value是链表里的node。这样可以直接通过某个Key访问到node
使用OrderDict的偷懒实现 OrderDict是Python中的特殊哈希表。会按插入先后顺序维持一个序列。最先添加的位于最左，后面的加到右边。这个版本里需要记忆orderdict丢弃第一个key的特殊用法： dict.popitem(last=False)
from collections import OrderedDict class LRUCache: &amp;#34;&amp;#34;&amp;#34; @param: capacity: An integer &amp;#34;&amp;#34;&amp;#34; def __init__(self, capacity): self.capacity = capacity self.maps = OrderedDict() &amp;#34;&amp;#34;&amp;#34; @param: key: An integer @return: An integer &amp;#34;&amp;#34;&amp;#34; def get(self, key): if key not in self.</description>
    </item>
    
  </channel>
</rss>
