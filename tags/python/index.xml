<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Air Junda Space</title>
    <link>https://airjunda.github.io/tags/python/</link>
    <description>Recent content in Python on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Sat, 19 Mar 2022 21:30:36 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>那些年 Celery 踩过的坑</title>
      <link>https://airjunda.github.io/post/celery/</link>
      <pubDate>Sat, 19 Mar 2022 21:30:36 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/celery/</guid>
      <description>初见Celery 下一家公司要用Celery, 于是决定在家自学。结果没想到看着官方文档很简单，其实有不少隐藏的坑。这篇文章就是记录下自己踩过的坑和排查经历。至于Celery是什么的内容，不在本文介绍。
Celery教程： https://www.celerycn.io/ru-men/celery-chu-ci-shi-yong
Windows的坑 在参考上面的教程时，我用的redis做broker。启动celery worker后，发现terminal显示了message received, 但是worker不执行相应的消息处理。搜索Google的解决方案，发现加上下面的 -P solo 参数启动worker可以解决：
celery -A tasks worker --loglevel=info -P solo 但是worker只能执行一次消息的处理。后续的消息都没反应。并且用ctrl + c无法终止worker, 会挂死，只能关掉terminal。
排查结论 最后发现有人提到了celery对windows的支持已经没了。celery &amp;gt;= 4的版本在windows下看起来是有bug的。并且感觉这个bug和win下的celery并行有关。于是决定试一试Linux下celery行不行。
Ubuntu的坑 改用Ubuntu的VM并不是一帆风顺的，遇到了好几个问题。最后都解决了。
Python3的版本 (更新：建议直接用18不要用16了)之前的vagrantfile一直用的Ubuntu 16的版本，但是16的版本呢，python3装的是3.5。我尝试网上的教程安装3.8，但是就死活说找不到 python3.8. 有人说是因为16的版本太旧了。装不了3.8和3.9。 而3.5的话，import新的celery会报语法错误。于是最后折腾了半天只好卸载了python3.5,装了3.6。然而这个带来了另一问题，就是pip3也卸载了。而重新装pip3会主动安装python3.5-minimum. 最后的解决方案是单独装pip3.6, 之后py3的包都用pip3.6而不是pip3去管理，或者设置soft link让pip3指向pip3.6。 这个过程涉及了好几个步骤，记录如下：
安装python3.6 apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com apt-get -y install software-properties-common add-apt-repository ppa:deadsnakes/ppa apt-get update apt-get -y install python3.6 apt remove python3.5-minimal -y #有人说不建议删除3.5，有些系统工具会用不了。我当时是删了。  指定python3为python3.6 设置soft link, 让python3指向python3.6的bin
which python #找出python的bin path, 一般在/usr/bin ln -sf /usr/bin/python3.</description>
    </item>
    
    <item>
      <title>Django Get Started</title>
      <link>https://airjunda.github.io/post/django/</link>
      <pubDate>Wed, 23 Feb 2022 23:40:26 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/django/</guid>
      <description>Django 本文主要是记录一些Django的初始概念。适用于第一次接触Django或者好久没碰Django后重新捡起来的复习。
新建Django Project django-admin startproject project_name 新建Django App python manage.py startapp app_name Django Project vs Django App 初学Django这两个概念我有点懵，Gin或者Flask是没有类似Django里类似的划分的。我目前对Django Project vs Django App的理解是下面这样的。
首先是Django官网的解释： An app is a web application that does something – e.g., a blog system, a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps. An app can be in multiple projects.</description>
    </item>
    
    <item>
      <title>Python 虚拟环境设置和使用</title>
      <link>https://airjunda.github.io/post/python_venv/</link>
      <pubDate>Wed, 23 Feb 2022 18:39:17 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/python_venv/</guid>
      <description>为什么需要虚拟环境？ 在使用Python语言时，通过pip（pip3）来安装第三方包，但是由于pip的特性，系统中只能安装每个包的一个版本。但是在实际项目开发中，不同项目可能需要第三方包的不同版本，迫使我们需要根据实际需求不断进行更新或卸载相应的包，而如果我们直接使用本地的Python环境，会导致整体的开发环境相当混乱而不易管理，这时候我们就需要开辟一个独立干净的空间进行开发和部署，虚拟环境就孕育而生。
Python虚拟环境搭建工具 Python的虚拟环境工具有好几个。一般接触的多的有virtualenv, venv, pipenv, conda; 我目前学习的是pipenv，对virtualenv有初步接触。未来可以在本文中继续补充相应的教程。
Pipenv pipenv所解决的问题:
 requirements.txt 依赖管理的局限 多个项目依赖不同第三方库、包版本问题 依赖分析  pipenv集成了pip，virtualenv两者的功能，且完善了两者的一些缺陷。 过去用virtualenv管理requirements.txt文件可能会有问题，Pipenv使用Pipfile和Pipfile.lock，后者存放将包的依赖关系，查看依赖关系是十分方便。
pipenv的安装方式如下:
pip3 install pipenv 如果是windows中安装需要添加如下的环境变量，才能在安装完后直接从cmd运行。注意下面路径中的xxx表示当前用户名，Python38是假定本机使用的python是3.8。
“C:\Users\XXX\AppData\Roaming\Python\Python38\Scripts” pipenv常用命令： pipenv --two # 使用当前系统中的Python2 创建环境 pipenv --three # 使用当前系统中的Python3 创建环境 pipenv --python 3 # 指定使用Python3创建环境 pipenv --python 3.6 # 指定使用Python3.6创建环境 pipenv --python 2.7.14 # 指定使用Python2.7.14创建环境 pipenv --rm # 删除当前目录下的虚拟环境 激活虚拟环境
cd project_folder pipenv shell 注意：
 创建环境时应使用系统中已经安装的、能够在环境变量中搜索到的Python 版本，否则会报错。 每次创建环境都会在当前目录下生成一个名为Pipfile文件，用来记录刚创建的环境信息，如果当前目录下之前存在该文件，会将其覆盖。  Reference https://zhuanlan.zhihu.com/p/163023998 https://blog.csdn.net/weixin_40922744/article/details/103723069</description>
    </item>
    
    <item>
      <title>Python自定义Comparator</title>
      <link>https://airjunda.github.io/post/comparator/</link>
      <pubDate>Wed, 12 Jan 2022 18:38:33 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/comparator/</guid>
      <description>Python中自定义comparator 有的题目需要排序时基于自定义的规则去排序。自定义规则通过手写comparator去实现。sorted(), sort()都可以传入自定义的compartor, 但是python3的使用上有点点不一样。因为没有了cmp参数。
Lintcode相关题目  184 Largest Number  comparator 对于函数 comp(left, right)：
 return a negative value (&amp;lt; 0) when the left item should be sorted before the right item return a positive value (&amp;gt; 0) when the left item should be sorted after the right item return 0 if left and right input is equal  实战（184 最大数） 给出一组非负整数，重新排列他们的顺序把他们组成一个最大的整数。
Input: [1, 20, 23, 4, 8] Output: &amp;#34;8423201&amp;#34; Python2</description>
    </item>
    
  </channel>
</rss>
