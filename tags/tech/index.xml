<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Air Junda Space</title>
    <link>https://airjunda.github.io/tags/tech/</link>
    <description>Recent content in Tech on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Fri, 17 Dec 2021 22:39:12 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker: Mount and Volume</title>
      <link>https://airjunda.github.io/post/docker_mount/</link>
      <pubDate>Fri, 17 Dec 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/docker_mount/</guid>
      <description>Docker数据持久化 默认情况下，在运行中的容器里创建的文件，被保存在一个可写的容器层。如果container只是停止。容器里写入的数据依然在。但是如果把容器给停了。容器里的数据就会丢失。为了永久保存容器里的数据(日志, DB etc.), 我们需要持久化容器里的数据到local host上，或者remote machine上，比如另一台服务器或者AWS S3
Docker主要提供了两种方式做数据的持久化
 Data Volume, 由Docker管理，(/var/lib/docker/volumes/ Linux), 持久化数据的最好方式 Bind Mount，由用户指定存储的数据具体mount在系统什么位置  本笔记主要记录的是2种持久化方式。Data Volume和Bind Mount
Data Volume volume在host上创建。创建和管理是由docker负责的。每个容器持久化的数据存到各自的volume。使用volume方式时，需要在容器的dockfile里添加 下面这样的命令：
VOLUME [&amp;#34;/filepath_in_container&amp;#34;]容器启动后，会在host中生成一个volume。可以通过 docker volume ls 查看到新创建的volume。常用命令：
 docker volume ls docker volume inspect xxxx (xxx is volume name)  inspect命令可以给出这个volume在host上的path, linux下cd 到那个path就可以看到容器里持久化目录的内容。windows则看不到。因为windows下其实是存放到一个VM中。
这样方式有一个缺点，就是每次容器创建时都会创建一个新的volume。如果我们想修改image后，运行的容器依然是使用同样的volume, (比如mysql 的容器重新部署后，依然使用原来已经持久化的DB数据) 那么我们需要在container run时指定volume的名字。首次运行会创建一个该名字的volume。之后每次的运行都会指向同名的volume而非再次创立新的volume。需要加上 -v vol_name: path_in_container
例子如下：
docker container run --name volume-mysql -e -v mysql-data:/var/lib/mysql mysql:5.7 注意：需要dockfile里声明
VOLUME [&amp;quot;/var/lib/mysql&amp;quot;] Bind Mount 这种方式就是指定host上的一个filepath和容器里的某个路径做映射。类似于vagrant里把vagrant file目录和VM里的/vagrant做映射。这个方式在Windows上比使用data volume好用多了。不过需要额外设置下window上的docker for desktop里file share设置。具体看回udemy的视频。</description>
    </item>
    
    <item>
      <title>Win Terminal Setup</title>
      <link>https://airjunda.github.io/post/win-terminal-setup/</link>
      <pubDate>Mon, 29 Nov 2021 21:10:13 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/win-terminal-setup/</guid>
      <description>Win10 Terminal 美化工程 这篇记录下win10上美化Terminal的步骤。
他山之石  攻略 Windows Terminal 主题美化  记录  先按上文第一篇安装了字体。解压后进入ttf文件夹。打开CascadiaMonoPL安装就好 然后powershell里执行下面3个命令  Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser Get-PoshThemes 输入下面这个命令可以随时替换theme;但是terminal重启后就失效。
Set-PoshPrompt -Theme agnoster # 我现在用的paradox 要想不失效，需要手动修改下面这个配置文件, 在cmd里敲  notepad $PROFILE 然后profile文件里添加这3行 Import-Module posh-git Import-Module oh-my-posh Set-Theme Agnoster/paradox/你想要的theme name
到这一步遇到的坑 设置完发现有乱码。paradox好一些，只有error符号乱码。其他主题连 ~ 都显示不出。试了各种PL字体都没用。最后解决方案是安装了Nerd字体就解决了。参考的是这篇：攻略。其中windows 官方攻略也提到了安装nerd字体库可以解决。nerd网站下有很多字体，我最后安装的是Caskaydia Cove Nerd Font
Windows Terminal的进一步配置 原文攻略还有后续的。但是我就没就继续做了。因为对目前效果已经满意。
Side Effect 修改了windows terminal的样式会导致IDE中的集成terminal出现色彩不协调或者乱码。需要单独设置。
VS Code中Terminal乱码解决 需要在File/Preference/Settings中设置Terminal Font. 在settings的搜索box中输入Terminal Font就能找到填写字体的框框。我Win Terminal用的是CaskaydiaCove NF，所以我在VS Code中也设置的是这个字体。但是也可以使用其他的。设置教程可以参考这篇： 解决 VScode 终端 Zsh 主题乱码的问题</description>
    </item>
    
    <item>
      <title>Redis Get Started on Windows 10</title>
      <link>https://airjunda.github.io/post/redis/</link>
      <pubDate>Tue, 23 Nov 2021 22:14:59 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/redis/</guid>
      <description>Win10安装Redis 这篇记录下win10上安装redis的一些要点
他山之石  win10下安装redis服务  要点   按照上文的启动redis后，打开一个新的cmd窗口，设置redis as service
  把redis的解压目录添加到环境变量中。然后重启一下terminal，之后就不用每次都进到redis安装目录才能运行redis-cli
  上面2步都做了后，以后启动redis只需要cmd里敲：
  redis-server --service-start 然后进入redis的CLI界面就敲：
redis-cli -h 127.0.0.1 -p 6379 停止redis service:
redis-server --service-stop Redis GUI 我用的是Another Redis Desktop Manager; 免费，Win/Mac都可以用
设置connection的话，默认的端口一般是6379
Redis分别式集群 看这篇了解下。以后再尝试： redis的安装和分布式配置简洁教程</description>
    </item>
    
    <item>
      <title>GoPath和Go的包管理</title>
      <link>https://airjunda.github.io/post/go_path/</link>
      <pubDate>Thu, 11 Nov 2021 00:53:20 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/go_path/</guid>
      <description>安装Go的必要设置之GoPath 这篇文章想讲一下GoPath这个东西。每次新电脑安装go是需要设置GoPath的。现在的安装一般会默认设置好。但是很多教程里会手动修改GoPATH到自己喜欢的目录。那么这个GoPath到底是做什么的呢？
他山之石   Go语言GOPATH是什么
  Create projects independent of $GOPATH using Go Modules
  让你的Golang项目在IDE里跑起来
  Go语言基本环境变量与依赖管理
  我的理解 GoPath的古早时代（现在基本不用了。但是可以了解） 很久很久以前，在遥远的银河系&amp;hellip;..有一帮人整出了go语言。然后开始有人使用go开发。但是早期go开发需要把代码放到gopath路径中。gopath在安装时会自动设置。gopath下需要有3个文件夹，src,bin,pkg; 我们的每个project folder都放到src路径下。
那时候，要导入一个go的dependency，需要使用go get命令。使用go get 拉取外部dependency会自动下载并安装到$GOPATH/src 目录下。
不过go get无法解决导入的dependency的版本控制。因为go get会把同一个依赖都存在同一个路径下面。所以go get 拉取的都是最新版。如果dependency新版不兼容了，就很麻烦。为了解决版本控制，先是有了govendor,但是现在已经普遍使用go mod了。Govendor我们直接忽略讲解但后面会讲mod
Project GoPath goland开启一个新的go的项目时，会让你设置global GoPath和Project GoPath。影响的主要是包的导入时该搜索哪里的问题。
import导包规则是：
  先去GOROOT/src/路径下找
  如果1没有，就去Project GOPATH/src/路径下找
  如果2还没找到，就去Global GOPATH路径下找(Global GOPATH一般是设置的系统变量里的那个GoPath)
  Project GoPath 代表项目所使用的 GoPath，该设置会被保存在工作目录的 .idea目录下，不会被设置到环境变量的 GoPath 中，但会在编译时使用到这个目录。（注意，GoPath需要目录内有src文件夹, 因此一个gin项目文件应该放在Project GoPath/src下面。所以Project GoPath不是gin项目的root folder)</description>
    </item>
    
    <item>
      <title>CICD Action</title>
      <link>https://airjunda.github.io/post/cicd-action/</link>
      <pubDate>Sun, 07 Nov 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/cicd-action/</guid>
      <description>使用GitHub Action 构建本博客的CICD发布流程 之前写Blgo, 每次发布前都需要Hugo -D 去生成发布后的files到Public文件下，然后手动去到Public路径下，commit再push上去。简单但枯燥。其实这个事情完全可以自动化做成流水线。每次Hugo workspace的repo发生commit，可以自动触发workflow去更新自己的page repo进而更新网站。
构建的这个流水线就是本文要谈论的CICD workflow; 我这次使用的是github action这个CICD工具去构建
他山之石 和以前一样，先搜了别人的攻略，复刻，再总结。这次参考的攻略是下面这个：
 Hugo使用Github Action自动部署博客到Github Pages  注意事项：
 部署可以用personal token或者deploy key; 上面攻略是用personal token, 我最后也是用这个 原文提到&amp;quot;在源码repo里新建一个github-actions分支&amp;quot;, 这个不需要单独新建一个branch, 可以在原来的main branch里操作，添加 .github/workflows/confg.yaml; config.yaml的文件名可以随便取，反正是yaml/yml结尾就行 原文里生成html是用hugo --minify, 替换成 hugo -D  我最后成功部署的配置文件如下
name: Deploy GitHub Page on: # 在push或pull请求事件上触发工作流 push: branches: - main jobs: # 此工作流程包含一个名为deploy的job deploy: name: deploy github page runs-on: ubuntu-latest # steps of the job steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
  </channel>
</rss>
