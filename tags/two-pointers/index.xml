<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Two Pointers on Air Junda Space</title>
    <link>https://airjunda.github.io/tags/two-pointers/</link>
    <description>Recent content in Two Pointers on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Tue, 01 Feb 2022 17:51:43 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/tags/two-pointers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two Pointers复习</title>
      <link>https://airjunda.github.io/post/two_pointers/</link>
      <pubDate>Tue, 01 Feb 2022 17:51:43 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/two_pointers/</guid>
      <description>Two Pointers问题 严格来说two pointers不是一种算法。是一类问题。主要是可以分成 背向，双向，同向。
背向双指针 用这题复习就好了：最长回文字串
双向双指针 经典例题是two sum，但是 双向双指针其实可以细分为3类。
 Reverse 类（较少） Two Sum 类（最多） Partition 类（较多）  Reverse 类 复习一下三步翻转法就好: 旋转数组
图解如下：
nums = &amp;#34;-----&amp;gt;--&amp;gt;&amp;#34;; k =3 result = &amp;#34;--&amp;gt;-----&amp;gt;&amp;#34;; reverse &amp;#34;-----&amp;gt;--&amp;gt;&amp;#34; we can get &amp;#34;&amp;lt;--&amp;lt;-----&amp;#34; reverse &amp;#34;&amp;lt;--&amp;#34; we can get &amp;#34;--&amp;gt;&amp;lt;-----&amp;#34; reverse &amp;#34;&amp;lt;-----&amp;#34; we can get &amp;#34;--&amp;gt;-----&amp;gt;&amp;#34; Two Sum 类 TwoSum原题：给一组整数arr和目标值，是否存在任意一对数字之和等于这个值 原题很简单，但是如果输入有重复元素应该如何处理呢？那么就看这题： Two Sum - Unique pairs
def twoSum6(self, nums, target): nums.sort() ans = 0 i,j = 0 , len(nums)-1 while i &amp;lt; j: tsum = nums[i] + nums[j] if tsum &amp;gt; target: j -= 1 elif tsum &amp;lt; target: i += 1 else: ans += 1 i += 1 j -= 1 while i &amp;lt; j and nums[i] == nums[i-1]: i += 1 while i &amp;lt; j and nums[j] == nums[j+1]: j -= 1 return ans 3Sum with repeated elements</description>
    </item>
    
  </channel>
</rss>
