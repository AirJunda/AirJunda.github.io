<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TechBlog on Air Junda Space</title>
    <link>https://airjunda.github.io/topics/techblog/</link>
    <description>Recent content in TechBlog on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Sun, 07 Nov 2021 22:39:12 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/topics/techblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CICD Action</title>
      <link>https://airjunda.github.io/post/cicd-action/</link>
      <pubDate>Sun, 07 Nov 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/cicd-action/</guid>
      <description>使用GitHub Action 构建本博客的CICD发布流程 之前写Blgo, 每次发布前都需要Hugo -D 去生成发布后的files到Public文件下，然后手动去到Public路径下，commit再push上去。简单但枯燥。其实这个事情完全可以自动化做成流水线。每次Hugo workspace的repo发生commit，可以自动触发workflow去更新自己的page repo进而更新网站。
构建的这个流水线就是本文要谈论的CICD workflow; 我这次使用的是github action这个CICD工具去构建
他山之石 和以前一样，先搜了别人的攻略，复刻，再总结。这次参考的攻略是下面这个：
 Hugo使用Github Action自动部署博客到Github Pages  注意事项：
 部署可以用personal token或者deploy key; 上面攻略是用personal token, 我最后也是用这个 原文提到&amp;quot;在源码repo里新建一个github-actions分支&amp;quot;, 这个不需要单独新建一个branch, 可以在原来的main branch里操作，添加 .github/workflows/confg.yaml; config.yaml的文件名可以随便取，反正是yaml/yml结尾就行 原文里生成html是用hugo --minify, 替换成 hugo -D  我最后成功部署的配置文件如下
name: Deploy GitHub Page on: # 在push或pull请求事件上触发工作流 push: branches: - main jobs: # 此工作流程包含一个名为deploy的job deploy: name: deploy github page runs-on: ubuntu-latest # steps of the job steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
  </channel>
</rss>
