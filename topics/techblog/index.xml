<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TechBlog on Air Junda Space</title>
    <link>https://airjunda.github.io/topics/techblog/</link>
    <description>Recent content in TechBlog on Air Junda Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Mon, 07 Feb 2022 23:33:17 +0800</lastBuildDate><atom:link href="https://airjunda.github.io/topics/techblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>System Design 备忘录</title>
      <link>https://airjunda.github.io/post/system_design1/</link>
      <pubDate>Mon, 07 Feb 2022 23:33:17 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/system_design1/</guid>
      <description>系统设计文章收藏 系统设计想等我自己有空的时候在慢慢更新专门的笔记。这里暂时先记录一些我看到的不错的文章，做一些简单的标记和分类。
高可用 方法论上，高可用是通过冗余+自动故障转移来实现的。整个互联网分层系统架构的高可用，又是通过每一层的冗余+自动故障转移来综合实现的
 什么是HA VIP技术  </description>
    </item>
    
    <item>
      <title>Union Find 复习</title>
      <link>https://airjunda.github.io/post/unionfind/</link>
      <pubDate>Fri, 04 Feb 2022 01:55:43 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/unionfind/</guid>
      <description>Union Find 一种用于解决一个图的2个点是否相互连通的数据结构。比BFS高效。复习可以用下面这2题来回忆: 589 连接图 590 连接图 II
运用： 434 · 岛屿的个数II
UnionFind的模板写法如下：
class UnionFind: def __init__(self, N): self.root = [i for i in range(N)] self.cnt = N def find(self, k): if self.root[k] == k: return k self.root[k] = self.find(self.root[k]) return self.root[k] def union(self, a, b): x = self.find(a) y = self.find(b) if x != y: self.root[y] = x self.cnt -= 1 return 并查集原生操作：
 合并两个元素所在的集合 Union 查询元素的老大是谁 Find 查询两个元素是否在同一个帮派  并查集的派生操作：</description>
    </item>
    
    <item>
      <title>Two Pointers复习</title>
      <link>https://airjunda.github.io/post/two_pointers/</link>
      <pubDate>Tue, 01 Feb 2022 17:51:43 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/two_pointers/</guid>
      <description>Two Pointers问题 严格来说two pointers不是一种算法。是一类问题。主要是可以分成 背向，双向，同向。
背向双指针 用这题复习就好了：最长回文字串
双向双指针 经典例题是two sum，但是 双向双指针其实可以细分为3类。
 Reverse 类（较少） Two Sum 类（最多） Partition 类（较多）  Reverse 类 复习一下三步翻转法就好: 旋转数组
图解如下：
nums = &amp;#34;-----&amp;gt;--&amp;gt;&amp;#34;; k =3 result = &amp;#34;--&amp;gt;-----&amp;gt;&amp;#34;; reverse &amp;#34;-----&amp;gt;--&amp;gt;&amp;#34; we can get &amp;#34;&amp;lt;--&amp;lt;-----&amp;#34; reverse &amp;#34;&amp;lt;--&amp;#34; we can get &amp;#34;--&amp;gt;&amp;lt;-----&amp;#34; reverse &amp;#34;&amp;lt;-----&amp;#34; we can get &amp;#34;--&amp;gt;-----&amp;gt;&amp;#34; Two Sum 类 TwoSum原题：给一组整数arr和目标值，是否存在任意一对数字之和等于这个值 原题很简单，但是如果输入有重复元素应该如何处理呢？那么就看这题： Two Sum - Unique pairs
def twoSum6(self, nums, target): nums.sort() ans = 0 i,j = 0 , len(nums)-1 while i &amp;lt; j: tsum = nums[i] + nums[j] if tsum &amp;gt; target: j -= 1 elif tsum &amp;lt; target: i += 1 else: ans += 1 i += 1 j -= 1 while i &amp;lt; j and nums[i] == nums[i-1]: i += 1 while i &amp;lt; j and nums[j] == nums[j+1]: j -= 1 return ans 3Sum with repeated elements</description>
    </item>
    
    <item>
      <title>DFS 复习</title>
      <link>https://airjunda.github.io/post/dfs/</link>
      <pubDate>Tue, 01 Feb 2022 15:49:36 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/dfs/</guid>
      <description>DFS 这篇是记录下DFS相关的题写起来时候的一些注意事项。DFS个人觉得VO中考察少，主要是OA, 而且OA中的运用很多时候是找不到最优解时的暴力解的手段。但是通过pruning是可以加速这个暴力搜索的过程的。DFS题主要是2大类，排列和组合。其中一个我觉得的难点是面对有重复元素的array的排列和组合的去重问题。
常见注意事项 DFS问题开始写代码之前，一定要先把问题抽象成一个图的遍历问题。然后再开始做。这样思路会清晰很多，也方便自己逻辑debug
另外我觉得DFS题自己做的时候内心要问自己下面几个问题：
 原始输入需要排序吗？ 要去重吗？ 形成中的中间态序列是一个array还是string或者是个数字  排列 排列题需要一个hashamp叫visited, 记录哪些元素已经被选中了。 排列的个数是n！
16 · 带重复元素的排列
class Solution: &amp;#34;&amp;#34;&amp;#34; @param nums: A list of integers @return: A list of unique permutations &amp;#34;&amp;#34;&amp;#34; def permuteUnique(self, nums: List[int]) -&amp;gt; List[List[int]]: # write your code here self.res = [] nums.sort() vis = [False] *len(nums) self.dfs(nums, [],vis) return self.res def dfs(self,nums,comb,visited): if len(comb) == len(nums): self.res.append(comb[:]) return for i in range(len(nums)): if visited[i] == True: continue # 去重做法 if i &amp;gt;= 1 and nums[i-1] == nums[i] and visited[i-1] == False: continue comb.</description>
    </item>
    
    <item>
      <title>Binary Search易错难点</title>
      <link>https://airjunda.github.io/post/binary_search/</link>
      <pubDate>Tue, 25 Jan 2022 18:10:21 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/binary_search/</guid>
      <description>二分法本身不难。不过有几类类问题我还不是特别熟练。容易卡住/出错。这个文章就是记录下相关的题。方便以后复习。
倍增法  447 在大数组中查找  二分答案 二分答案容易出Hard. 这类题难的是要么想不到可以用二分法做，要么就是二分用的helper()不知道做什么。二分答案的helper()很多题里都是一种greedy的思路。
931这题号称集二分法之大成的经典题
二分答案合集
旋转数组相关 寻找旋转排序数组中的最小值
 159 160  搜索旋转数组中的值
 62 63  159 寻找旋转排序数组中的最小值（无重复） 159这题 我觉得难点是思考的全面性。比如binary search里判断条件是 &amp;gt; 还是 &amp;gt;=；但是这题是假设no repeated elements, 所以其实不难。
class Solution: &amp;#34;&amp;#34;&amp;#34; @param nums: a rotated sorted array @return: the minimum number in the array &amp;#34;&amp;#34;&amp;#34; def findMin(self, nums): # 159 solution l, r = 0, len(nums)-1 leftmin, rightmax = nums[0], nums[-1] while l + 1 &amp;lt; r: m = (l + r) // 2 if nums[m] &amp;gt;= rightmax: l = m elif nums[m] &amp;lt; rightmax: r = m return min(nums[r],nums[l],leftmin) 160 寻找旋转排序数组中的最小值（有重复） 160这题的坑是这样的：如果沿用159的做法会错。因为有重复元素后，如果旋转点刚好是在一群repeated element中间。就会形成新的nums里nums[-1]==nums[0]</description>
    </item>
    
    <item>
      <title>Python自定义Comparator</title>
      <link>https://airjunda.github.io/post/comparator/</link>
      <pubDate>Wed, 12 Jan 2022 18:38:33 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/comparator/</guid>
      <description>Python中自定义comparator 有的题目需要排序时基于自定义的规则去排序。自定义规则通过手写comparator去实现。sorted(), sort()都可以传入自定义的compartor, 但是python3的使用上有点点不一样。因为没有了cmp参数。
Lintcode相关题目  184 Largest Number  comparator 对于函数 comp(left, right)：
 return a negative value (&amp;lt; 0) when the left item should be sorted before the right item return a positive value (&amp;gt; 0) when the left item should be sorted after the right item return 0 if left and right input is equal  实战（184 最大数） 给出一组非负整数，重新排列他们的顺序把他们组成一个最大的整数。
Input: [1, 20, 23, 4, 8] Output: &amp;#34;8423201&amp;#34; Python2</description>
    </item>
    
    <item>
      <title>LRU算法复习笔记</title>
      <link>https://airjunda.github.io/post/lru/</link>
      <pubDate>Thu, 30 Dec 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/lru/</guid>
      <description>LRU算法 这篇是记录下LRU算法写起来时候的一些注意事项。LRU算法在OS, DB中都有涉及。在Redis也有涉及。面试也是高频的一个考察。 LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。
他山之石  labuladong解析   分析 LeetCode的LRU需要下面2个这样的借口。要求：
 o(1)操作 满了capacity时，set() 时候需要踢掉最久未使用的key-value pair来腾空间 每次get, 需要把key-value挪到某种排序的最前面。  def __init__(self, capacity): pass def get(self, key): pass def set(self, key, value): pass 那么，什么数据结构同时符合上述条件呢？哈希表set/get快，但是数据无固定顺序；链表有顺序之分，set插入快，但是get慢。所以结合一下，形成一种新的数据结构：哈希链表。
哈希链表就是一个双向linkedlist + hashmap；hashmap的key是key, value是链表里的node。这样可以直接通过某个Key访问到node
使用OrderDict的偷懒实现 OrderDict是Python中的特殊哈希表。会按插入先后顺序维持一个序列。最先添加的位于最左，后面的加到右边。这个版本里需要记忆orderdict丢弃第一个key的特殊用法： dict.popitem(last=False)
from collections import OrderedDict class LRUCache: &amp;#34;&amp;#34;&amp;#34; @param: capacity: An integer &amp;#34;&amp;#34;&amp;#34; def __init__(self, capacity): self.capacity = capacity self.maps = OrderedDict() &amp;#34;&amp;#34;&amp;#34; @param: key: An integer @return: An integer &amp;#34;&amp;#34;&amp;#34; def get(self, key): if key not in self.</description>
    </item>
    
    <item>
      <title>Docker: Network</title>
      <link>https://airjunda.github.io/post/docker_network/</link>
      <pubDate>Sat, 18 Dec 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/docker_network/</guid>
      <description>Docker笔记之网络相关 这篇是Docker从入门到精通课程的网络章节的复习。docker的网络相关内容主要涉及多容器间的通信，容器端口转发，暴露等内容。
 网络基础回顾 看这篇文章去复习 Traffic example, the full picture
 网络相关linux command  ifconfig ping telnet tracepath curl 以下我觉得可以补充了解的命令  netstat    Udemy课上Demo例子 使用Busybox image。Busybox是一个集成了一百多个最常用Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix工具集; 别的很多image你进去连ifconfig命令都没装 Demo用到的命令如下：
#启动容器命名为box1 docker container run -d --rm --name box1 busybox /bin/sh -c &amp;quot;while true; do sleep 360; done&amp;quot; #进入容器 docker container exec -it box1 sh #进入容器后看本容器的ip address ip a # 不进入容器看ip address docker container inspect box1 # VM中访问某个容器的80端口 curl xxx.xxx.xx.xx:80 # 下载nginx80端口的默认页面 wget xxx.</description>
    </item>
    
    <item>
      <title>Docker: Mount and Volume</title>
      <link>https://airjunda.github.io/post/docker_mount/</link>
      <pubDate>Fri, 17 Dec 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/docker_mount/</guid>
      <description>Docker数据持久化 默认情况下，在运行中的容器里创建的文件，被保存在一个可写的容器层。如果container只是停止。容器里写入的数据依然在。但是如果把容器给停了。容器里的数据就会丢失。为了永久保存容器里的数据(日志, DB etc.), 我们需要持久化容器里的数据到local host上，或者remote machine上，比如另一台服务器或者AWS S3
Docker主要提供了两种方式做数据的持久化
 Data Volume, 由Docker管理，(/var/lib/docker/volumes/ Linux), 持久化数据的最好方式 Bind Mount，由用户指定存储的数据具体mount在系统什么位置  本笔记主要记录的是2种持久化方式。Data Volume和Bind Mount
Data Volume volume在host上创建。创建和管理是由docker负责的。每个容器持久化的数据存到各自的volume。使用volume方式时，需要在容器的dockfile里添加 下面这样的命令：
VOLUME [&amp;#34;/filepath_in_container&amp;#34;]容器启动后，会在host中生成一个volume。可以通过 docker volume ls 查看到新创建的volume。常用命令：
 docker volume ls docker volume inspect xxxx (xxx is volume name)  inspect命令可以给出这个volume在host上的path, linux下cd 到那个path就可以看到容器里持久化目录的内容。windows则看不到。因为windows下其实是存放到一个VM中。
这样方式有一个缺点，就是每次容器创建时都会创建一个新的volume。如果我们想修改image后，运行的容器依然是使用同样的volume, (比如mysql 的容器重新部署后，依然使用原来已经持久化的DB数据) 那么我们需要在container run时指定volume的名字。首次运行会创建一个该名字的volume。之后每次的运行都会指向同名的volume而非再次创立新的volume。需要加上 -v vol_name: path_in_container
例子如下：
docker container run --name volume-mysql -e -v mysql-data:/var/lib/mysql mysql:5.7 注意：需要dockfile里声明
VOLUME [&amp;#34;/var/lib/mysql&amp;#34;]Bind Mount 这种方式就是指定host上的一个filepath和容器里的某个路径做映射。类似于vagrant里把vagrant file目录和VM里的/vagrant做映射。这个方式在Windows上比使用data volume好用多了。不过需要额外设置下window上的docker for desktop里file share设置。具体看回udemy的视频。</description>
    </item>
    
    <item>
      <title>Win Terminal Setup</title>
      <link>https://airjunda.github.io/post/win-terminal-setup/</link>
      <pubDate>Mon, 29 Nov 2021 21:10:13 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/win-terminal-setup/</guid>
      <description>Win10 Terminal 美化工程 这篇记录下win10上美化Terminal的步骤。
他山之石  攻略 Windows Terminal 主题美化  记录  先按上文第一篇安装了字体。解压后进入ttf文件夹。打开CascadiaMonoPL安装就好 然后powershell里执行下面3个命令  Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser Get-PoshThemes 输入下面这个命令可以随时替换theme;但是terminal重启后就失效。
Set-PoshPrompt -Theme agnoster # 我现在用的paradox 要想不失效，需要手动修改下面这个配置文件, 在cmd里敲  notepad $PROFILE 然后profile文件里添加这3行 Import-Module posh-git Import-Module oh-my-posh Set-Theme Agnoster/paradox/你想要的theme name
到这一步遇到的坑 设置完发现有乱码。paradox好一些，只有error符号乱码。其他主题连 ~ 都显示不出。试了各种PL字体都没用。最后解决方案是安装了Nerd字体就解决了。参考的是这篇：攻略。其中windows 官方攻略也提到了安装nerd字体库可以解决。nerd网站下有很多字体，我最后安装的是Caskaydia Cove Nerd Font
Windows Terminal的进一步配置 原文攻略还有后续的。但是我就没就继续做了。因为对目前效果已经满意。
Side Effect 修改了windows terminal的样式会导致IDE中的集成terminal出现色彩不协调或者乱码。需要单独设置。
VS Code中Terminal乱码解决 需要在File/Preference/Settings中设置Terminal Font. 在settings的搜索box中输入Terminal Font就能找到填写字体的框框。我Win Terminal用的是CaskaydiaCove NF，所以我在VS Code中也设置的是这个字体。但是也可以使用其他的。设置教程可以参考这篇： 解决 VScode 终端 Zsh 主题乱码的问题</description>
    </item>
    
    <item>
      <title>Redis Get Started on Windows 10</title>
      <link>https://airjunda.github.io/post/redis/</link>
      <pubDate>Tue, 23 Nov 2021 22:14:59 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/redis/</guid>
      <description>Win10安装Redis 这篇记录下win10上安装redis的一些要点
他山之石  win10下安装redis服务  要点   按照上文的启动redis后，打开一个新的cmd窗口，设置redis as service
  把redis的解压目录添加到环境变量中。然后重启一下terminal，之后就不用每次都进到redis安装目录才能运行redis-cli
  上面2步都做了后，以后启动redis只需要cmd里敲：
  redis-server --service-start 然后进入redis的CLI界面就敲：
redis-cli -h 127.0.0.1 -p 6379 停止redis service:
redis-server --service-stop Redis GUI 我用的是Another Redis Desktop Manager; 免费，Win/Mac都可以用
设置connection的话，默认的端口一般是6379
Redis分别式集群 看这篇了解下。以后再尝试： redis的安装和分布式配置简洁教程</description>
    </item>
    
    <item>
      <title>GoPath和Go的包管理</title>
      <link>https://airjunda.github.io/post/go_path/</link>
      <pubDate>Thu, 11 Nov 2021 00:53:20 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/go_path/</guid>
      <description>安装Go的必要设置之GoPath 这篇文章想讲一下GoPath这个东西。每次新电脑安装go是需要设置GoPath的。现在的安装一般会默认设置好。但是很多教程里会手动修改GoPATH到自己喜欢的目录。那么这个GoPath到底是做什么的呢？
他山之石   Go语言GOPATH是什么
  Create projects independent of $GOPATH using Go Modules
  让你的Golang项目在IDE里跑起来
  Go语言基本环境变量与依赖管理
  我的理解 GoPath的古早时代（现在基本不用了。但是可以了解） 很久很久以前，在遥远的银河系&amp;hellip;..有一帮人整出了go语言。然后开始有人使用go开发。但是早期go开发需要把代码放到gopath路径中。gopath在安装时会自动设置。gopath下需要有3个文件夹，src,bin,pkg; 我们的每个project folder都放到src路径下。
那时候，要导入一个go的dependency，需要使用go get命令。使用go get 拉取外部dependency会自动下载并安装到$GOPATH/src 目录下。
不过go get无法解决导入的dependency的版本控制。因为go get会把同一个依赖都存在同一个路径下面。所以go get 拉取的都是最新版。如果dependency新版不兼容了，就很麻烦。为了解决版本控制，先是有了govendor,但是现在已经普遍使用go mod了。Govendor我们直接忽略讲解但后面会讲mod
Project GoPath goland开启一个新的go的项目时，会让你设置global GoPath和Project GoPath。影响的主要是包的导入时该搜索哪里的问题。
import导包规则是：
  先去GOROOT/src/路径下找
  如果1没有，就去Project GOPATH/src/路径下找
  如果2还没找到，就去Global GOPATH路径下找(Global GOPATH一般是设置的系统变量里的那个GoPath)
  Project GoPath 代表项目所使用的 GoPath，该设置会被保存在工作目录的 .idea目录下，不会被设置到环境变量的 GoPath 中，但会在编译时使用到这个目录。（注意，GoPath需要目录内有src文件夹, 因此一个gin项目文件应该放在Project GoPath/src下面。所以Project GoPath不是gin项目的root folder)</description>
    </item>
    
    <item>
      <title>CICD Action</title>
      <link>https://airjunda.github.io/post/cicd-action/</link>
      <pubDate>Sun, 07 Nov 2021 22:39:12 +0800</pubDate>
      
      <guid>https://airjunda.github.io/post/cicd-action/</guid>
      <description>使用GitHub Action 构建本博客的CICD发布流程 之前写Blgo, 每次发布前都需要Hugo -D 去生成发布后的files到Public文件下，然后手动去到Public路径下，commit再push上去。简单但枯燥。其实这个事情完全可以自动化做成流水线。每次Hugo workspace的repo发生commit，可以自动触发workflow去更新自己的page repo进而更新网站。
构建的这个流水线就是本文要谈论的CICD workflow; 我这次使用的是github action这个CICD工具去构建
他山之石 和以前一样，先搜了别人的攻略，复刻，再总结。这次参考的攻略是下面这个：
 Hugo使用Github Action自动部署博客到Github Pages  注意事项：
 部署可以用personal token或者deploy key; 上面攻略是用personal token, 我最后也是用这个 原文提到&amp;quot;在源码repo里新建一个github-actions分支&amp;quot;, 这个不需要单独新建一个branch, 可以在原来的main branch里操作，添加 .github/workflows/confg.yaml; config.yaml的文件名可以随便取，反正是yaml/yml结尾就行 原文里生成html是用hugo --minify, 替换成 hugo -D  我最后成功部署的配置文件如下
name: Deploy GitHub Page on: # 在push或pull请求事件上触发工作流 push: branches: - main jobs: # 此工作流程包含一个名为deploy的job deploy: name: deploy github page runs-on: ubuntu-latest # steps of the job steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
  </channel>
</rss>
